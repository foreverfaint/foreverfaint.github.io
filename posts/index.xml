<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Dev66</title><link>https://dev66.xyz/posts/</link><description>Recent content in Posts on Dev66</description><generator>Hugo -- gohugo.io</generator><language>zh-Hant</language><copyright>&amp;copy; Copyright notice</copyright><lastBuildDate>Thu, 24 Feb 2022 17:12:22 +0800</lastBuildDate><atom:link href="https://dev66.xyz/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>TensorRT容器镜像</title><link>https://dev66.xyz/posts/build-tensorrt-docker-image/</link><pubDate>Thu, 24 Feb 2022 17:12:22 +0800</pubDate><guid>https://dev66.xyz/posts/build-tensorrt-docker-image/</guid><description>&lt;p>首先，NVIDIA NGC为每个TensorRT的版本提供了&lt;a href="https://docs.nvidia.com/deeplearning/tensorrt/container-release-notes/rel_22-01.html">docker镜像&lt;/a>。具体的镜像使用方法参见&lt;a href="https://catalog.ngc.nvidia.com/orgs/nvidia/containers/tensorrt">NGC TensorRT页面&lt;/a> 。简单说，开发者基于官方镜像build自己的镜像。&lt;/p></description></item><item><title>Python测试开发2 - mock</title><link>https://dev66.xyz/posts/python-test-2-mock/</link><pubDate>Sun, 10 Oct 2021 13:55:00 +0800</pubDate><guid>https://dev66.xyz/posts/python-test-2-mock/</guid><description>&lt;p>上篇文章介绍了&lt;code>python&lt;/code>测试开发的第一大神器&lt;code>fixture&lt;/code>， 本篇则聚焦另一神器&lt;code>mock&lt;/code>。&lt;/p></description></item><item><title>Python测试开发1 - fixture</title><link>https://dev66.xyz/posts/python-test-1-fixture/</link><pubDate>Thu, 07 Oct 2021 22:03:00 +0800</pubDate><guid>https://dev66.xyz/posts/python-test-1-fixture/</guid><description>&lt;p>资深开发者实际时间分配有可能是4分调研+设计，3分编码，3分测试。且越是老鸟，测试比重越高。测试下功夫了，质量就到位了，返工次数少，调试难度低，工效KPI也就高了。本文分享&lt;code>Python&lt;/code>测试开发中的一些心得。&lt;/p></description></item><item><title>通过环境变量加载配置</title><link>https://dev66.xyz/posts/double-quote-env-var/</link><pubDate>Sat, 15 May 2021 23:13:00 +0800</pubDate><guid>https://dev66.xyz/posts/double-quote-env-var/</guid><description>&lt;p>启动时，程序读取配置有几种方法：&lt;/p>
&lt;ol>
&lt;li>把配置文件作为参数传给程序&lt;/li>
&lt;li>程序从配置服务器读取配置参数&lt;/li>
&lt;li>通过环境变量载入参数&lt;/li>
&lt;/ol>
&lt;p>第三种方法，由于简单方便，兼容性高，无需依赖其他基础设施，常作为中小型程序首选方法。本文分享几个使用环境变量的经验。&lt;/p></description></item><item><title>创业公司中的技术管理</title><link>https://dev66.xyz/posts/management-in-startup/</link><pubDate>Thu, 08 Apr 2021 20:48:00 +0800</pubDate><guid>https://dev66.xyz/posts/management-in-startup/</guid><description>&lt;p>不同类型的技术公司，甚至同一家技术公司的不同阶段，会面对不同的管理难题。最近离开了工作6年的公司，开始找新的工作。常想，如果面试官问我这几年遇到了哪些管理难题，我该如何回答？&lt;/p></description></item><item><title>360环评</title><link>https://dev66.xyz/posts/360-feedback/</link><pubDate>Sun, 17 Jan 2021 15:04:00 +0800</pubDate><guid>https://dev66.xyz/posts/360-feedback/</guid><description>&lt;p>这是我司第二年做360环评。第一次环评时，发生了被反馈者拿着反馈结果找提供反馈的同事吵架的事请。这事儿隔了一年我才知道，感慨颇深：&lt;/p></description></item><item><title>FFmpeg Idioms 2</title><link>https://dev66.xyz/posts/ffmpeg-idioms-2/</link><pubDate>Tue, 05 May 2020 00:00:00 +0800</pubDate><guid>https://dev66.xyz/posts/ffmpeg-idioms-2/</guid><description>&lt;p>上一篇文章中，我们已经熟悉了FFmpeg相关的基本概念。这篇中，我们就介绍一些常见的FFmpeg用法，比如：格式转码，抽取关键帧，分段录制rtsp流等。&lt;/p></description></item><item><title>FFmpeg Idioms I</title><link>https://dev66.xyz/posts/ffmpeg-idioms-1/</link><pubDate>Mon, 04 May 2020 00:00:00 +0800</pubDate><guid>https://dev66.xyz/posts/ffmpeg-idioms-1/</guid><description>&lt;p>FFmpeg （Fast Forward Mpeg）是一个历史悠久，功能强大的跨平台多媒体处理工具。我会在这篇文章中介绍一些常见FFmpeg惯用法。也会结合FFmpeg的源代码对一些惯用法原理进行简单讲解。&lt;/p></description></item><item><title>sealed keyword in Kotlin</title><link>https://dev66.xyz/posts/sealed-keyword-in-kotlin/</link><pubDate>Sun, 22 Mar 2020 00:00:00 +0800</pubDate><guid>https://dev66.xyz/posts/sealed-keyword-in-kotlin/</guid><description>&lt;p>&lt;code>sealed&lt;/code>关键字在&lt;code>C#&lt;/code>中用来修饰类。&lt;code>sealed&lt;/code>这个词“人如其名”，显而易见的表明：它使得被它修饰的类或者方法被封闭，不允许被继承(sealed class)，或者被重写（sealed method）。Kotlin中也有&lt;code>sealed&lt;/code>关键字，但它的含义与C#中的含义有巨大的不同。&lt;/p></description></item><item><title>如何算一篇好的阐述并解决问题的博文？</title><link>https://dev66.xyz/posts/first-try-on-flutter/</link><pubDate>Mon, 10 Feb 2020 00:02:00 +0800</pubDate><guid>https://dev66.xyz/posts/first-try-on-flutter/</guid><description>&lt;p>最近在学习Flutter开发Android应用。新手搭环境难免遇到各种坑。一般都是边搜索边尝试，最终解决问题。因此“搜索”到别人的解法至关重要。我发现网上有大量的解法，但很多时候，要么“解法”缺斤短两，关键步骤缺失；要么知其然不知所以然，瞎猫碰死耗子解决问题，让读者无法借鉴。到底如何才算一篇合格的issue resolution博文，怎样才能帮到他人？&lt;/p></description></item><item><title>nohup</title><link>https://dev66.xyz/posts/nohup/</link><pubDate>Sun, 19 Jan 2020 00:00:00 +0800</pubDate><guid>https://dev66.xyz/posts/nohup/</guid><description>&lt;p>nohup是一个POSIX命令。人如其名“NO”+“HUP（hangup）”，“HUP”是挂起信号，“NOHUP”就是忽略挂起信号。&lt;/p></description></item><item><title>Valine的错误信息</title><link>https://dev66.xyz/posts/valine/</link><pubDate>Tue, 07 Jan 2020 00:00:00 +0800</pubDate><guid>https://dev66.xyz/posts/valine/</guid><description>&lt;p>用Valine作为静态博客的社会化评论插件。但今天用的时候，发现一些错误信息，将解决方案写于此。&lt;/p></description></item><item><title>Kotlin开发Android应用</title><link>https://dev66.xyz/posts/kotlin-for-android/</link><pubDate>Sat, 23 Nov 2019 00:00:00 +0800</pubDate><guid>https://dev66.xyz/posts/kotlin-for-android/</guid><description>&lt;p>最近在尝试用Kotlin开发Android应用。作为一个Android+Kotlin双小白，开始阶段踩了不少坑，在这里做个记录。&lt;/p></description></item><item><title>C# 8.0</title><link>https://dev66.xyz/posts/csharp-8/</link><pubDate>Sun, 20 Oct 2019 00:00:00 +0800</pubDate><guid>https://dev66.xyz/posts/csharp-8/</guid><description>&lt;p>九月份，C# 8.0作为.Net Core 3.0的一部分正式发布了。本文会基于Ubuntu 18.04上的.Net Core 3.0介绍C# 8.0的各种新功能。&lt;/p></description></item><item><title>写博客</title><link>https://dev66.xyz/posts/blog/</link><pubDate>Mon, 14 Oct 2019 00:00:00 +0800</pubDate><guid>https://dev66.xyz/posts/blog/</guid><description>&lt;p>大部分做技术的人都有通过写博客扩大自己影响力的想法。各中不同不过是能不能坚持，坚持多久，反反复复开几次的区别。比如我自己已经折腾了不下四五次了，每次写得时间有长有短。最开始的几个博客搁置太久，连写得东西都已经寻不到了。现在回头看写博客这事，还是能看出几个清晰的阶段的。&lt;/p></description></item><item><title>jq</title><link>https://dev66.xyz/posts/jq/</link><pubDate>Thu, 10 Oct 2019 00:00:00 +0800</pubDate><guid>https://dev66.xyz/posts/jq/</guid><description>&lt;p>JSON格式的字符串是Web API最常见的返回格式。在使用API时，我们经常使用&lt;code>curl&lt;/code>或者&lt;code>wget&lt;/code>快速方便的调试API。如果API返回的是JSON，输出到控制台里会像下面这样。没有格式，很难阅读：&lt;/p></description></item><item><title>YUV</title><link>https://dev66.xyz/posts/yuv/</link><pubDate>Mon, 16 Sep 2019 00:00:00 +0800</pubDate><guid>https://dev66.xyz/posts/yuv/</guid><description>&lt;p>&lt;a href="https://en.wikipedia.org/wiki/YUV">YUV&lt;/a>和RGB一样，是一种色彩编码方案。其中Y称为亮度（Luminance），U和V称为色度（Chrominance），描述影像色彩及饱和度。YUV的出现是为了兼容黑白电视，即在灰度信号（Y）之上，增加UV信号。这样及时电视台发送彩色的YUV图像，黑白电视依旧可以用Y，按黑白视频播出。&lt;/p></description></item><item><title>Coder, Programmer, Developer, and Software Engineer</title><link>https://dev66.xyz/posts/coder-programmer-developer-engineer/</link><pubDate>Tue, 27 Aug 2019 10:20:00 +0800</pubDate><guid>https://dev66.xyz/posts/coder-programmer-developer-engineer/</guid><description>&lt;p>What is the difference among coder, programmer, developer, and software engineer?&lt;/p></description></item><item><title>Nvidia GPU Cloud</title><link>https://dev66.xyz/posts/ngc/</link><pubDate>Mon, 27 May 2019 00:00:00 +0800</pubDate><guid>https://dev66.xyz/posts/ngc/</guid><description>&lt;p>NGC全称为Nvidia GPU Cloud。提供了一组容器镜像，包装了基于GPU的各种软件框架作为运行环境，方便研发和生产使用；同时也提供各种pre-trained的深度学习模型，方便大家学习。&lt;/p></description></item><item><title>Git Idioms 2</title><link>https://dev66.xyz/posts/git-idioms-2/</link><pubDate>Fri, 05 Oct 2018 00:00:00 +0800</pubDate><guid>https://dev66.xyz/posts/git-idioms-2/</guid><description>&lt;p>上一篇文章讲了&lt;code>git revert&lt;/code>和&lt;code>git reset&lt;/code>。这一篇在记录一下&lt;code>git rebase&lt;/code>的简单用法。有很多个场景可以使用&lt;code>git rebase&lt;/code>来更好的提交代码。&lt;/p></description></item><item><title>Git Idioms 1</title><link>https://dev66.xyz/posts/git-idioms-1/</link><pubDate>Sun, 30 Sep 2018 00:00:00 +0800</pubDate><guid>https://dev66.xyz/posts/git-idioms-1/</guid><description>&lt;p>最近观察周围的同事使用git的方式，发现几乎所有人都是git add，git commit，git push, git pull, git merge几个命令打遍天下。&lt;/p></description></item><item><title>Python多进程开发</title><link>https://dev66.xyz/posts/python-multi-process/</link><pubDate>Thu, 20 Oct 2016 00:00:00 +0800</pubDate><guid>https://dev66.xyz/posts/python-multi-process/</guid><description>&lt;p>用Python有一段时间了，但是延续其他语言开发经验，用线程较多。然而Python自身GIL机制导致计算密集型的运算用多线程反而低效。故专门研究了一下Python多进程的开发，在这里分享一些心得。&lt;/p></description></item><item><title>Python包引用规则</title><link>https://dev66.xyz/posts/python-package-import/</link><pubDate>Sun, 24 Apr 2016 09:38:44 +0800</pubDate><guid>https://dev66.xyz/posts/python-package-import/</guid><description>&lt;p>python有&lt;a href="https://docs.python.org/2/tutorial/modules.html#packages">package&lt;/a>和&lt;a href="https://docs.python.org/2/tutorial/modules.html">module&lt;/a>两种概念。package是一个文件夹（包含&lt;code>__init__.py&lt;/code>文件的文件夹），module是一个文件。module中引用其他package和module时，通过语法&lt;code>import A&lt;/code>或者&lt;code>from A import B&lt;/code>完成。import的引用又可以分为绝对引用和相对引用两种：&lt;/p></description></item><item><title>Python的抽象类</title><link>https://dev66.xyz/posts/abcmeta/</link><pubDate>Sat, 16 Apr 2016 13:59:34 +0800</pubDate><guid>https://dev66.xyz/posts/abcmeta/</guid><description>&lt;p>面向对象语言大都支持抽象类：比如C#中的abstract关键字，C++的类方法的=0语法。python也支持面向对象编程范式。如何在Python中创建一个抽象类呢？答案是 &lt;a href="https://docs.python.org/2/library/abc.html">ABCMeta&lt;/a>（ABC = Abstract Base Class）。&lt;/p></description></item><item><title>Hugo语法高亮</title><link>https://dev66.xyz/posts/syntax-highlight-in-hugo/</link><pubDate>Sun, 03 Jan 2016 21:21:24 +0800</pubDate><guid>https://dev66.xyz/posts/syntax-highlight-in-hugo/</guid><description>&lt;p>&lt;a href="http://gohugo.io">Hugo&lt;/a>是Go语言实现的静态网页生成器，常用来创建和管理博客。写技术博客，在页面中渲染代码是必不可少的需求。Hugo可以支持Server和Client两种方法进行代码的&lt;a href="http://gohugo.io/extras/highlighting/#highlight-js-example:c4210b265c792cac9a6cf6a5f53b671d">语法高亮处理&lt;/a>：&lt;/p>
&lt;blockquote>
&lt;p>Update@2022 当前版本的Hugo已经使用&lt;code>Go&lt;/code>内置的&lt;a href="https://github.com/alecthomas/chroma">&lt;code>Chroma&lt;/code>&lt;/a>进行语法高亮处理。但是以下的旧方案依旧可以使用。&lt;/p>
&lt;/blockquote></description></item><item><title>在循环中使用lambda</title><link>https://dev66.xyz/posts/lambda-in-loop/</link><pubDate>Sat, 02 Jan 2016 20:45:29 +0800</pubDate><guid>https://dev66.xyz/posts/lambda-in-loop/</guid><description>&lt;p>谈到函数式编程，必然会提到lambda。lambda使得高阶函数运算用起来得心应手。而谈到lambda就要提到闭包。闭包将lambda和它运行时依赖“环境”连接在一起。用一个简单python代码来描述lambda和闭包：&lt;/p></description></item><item><title>在Scrapy中使用cookie</title><link>https://dev66.xyz/posts/scrapy-cookie/</link><pubDate>Fri, 11 Dec 2015 15:27:56 +0800</pubDate><guid>https://dev66.xyz/posts/scrapy-cookie/</guid><description>&lt;p>Python有一个很出色的爬虫包&lt;a href="http://scrapy.org/">scrapy&lt;/a>，架构清晰，设计精巧，能想到的爬虫工具需要的定制化点都有对应的扩展机制。 大部分网站都使用cookie来记录访问用户的识别信息。每个请求都会把用户识别信息带回到服务器，帮助后台程序识别独立用户，这样可以进行鉴权，反爬，限流等很多的操作。所以对于爬虫来说，如何模拟和使用cookie“欺骗”服务器，是十分重要的一步。本文就介绍如何在scrapy中使用cookie技术。&lt;/p></description></item><item><title>Streaming Pipeline in Python - 2</title><link>https://dev66.xyz/posts/streaming-pipeline-in-python-2/</link><pubDate>Fri, 20 Nov 2015 00:00:00 +0800</pubDate><guid>https://dev66.xyz/posts/streaming-pipeline-in-python-2/</guid><description>&lt;p>除了&lt;a href="https://dev66.xyz/posts/streaming-pipeline-in-python-1/">上一篇文章&lt;/a>中提到的几个问题，在使用Generator Expression的过程中，还遇到了一个bug。&lt;/p></description></item><item><title>Streaming Pipeline in Python - 1</title><link>https://dev66.xyz/posts/streaming-pipeline-in-python-1/</link><pubDate>Sun, 01 Nov 2015 00:00:00 +0800</pubDate><guid>https://dev66.xyz/posts/streaming-pipeline-in-python-1/</guid><description>&lt;p>最近用python 2.7做数据处理。数据说大不大，说小不小，千万级别。显然用Hadoop是大材小用。可由于每笔数据都是一个很大的json对象，处理起来很耗内存。单机加到8GB，依旧会出现OOM。不过还好此类问题有成熟的解决方案“流水线式的数据处理”：每次从文件读一笔记录数据，处理一笔数据，把处理结果持久化，相应的对象实例（内存）被回收。方案成熟易实现。先把代码列在下面，然后再解释其中遇到的坑。&lt;/p></description></item></channel></rss>